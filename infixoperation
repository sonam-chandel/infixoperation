#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <math.h>

#define MAX 100


struct Stack {
    int top;
    char arr[MAX];
};


void initStack(struct Stack *stack) {
    stack->top = -1;
}


int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}


void push(struct Stack *stack, char value) {
    if (stack->top == MAX - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack->arr[++(stack->top)] = value;
}


char pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack->arr[(stack->top)--];
}


char peek(struct Stack *stack) {
    if (!isEmpty(stack)) {
        return stack->arr[stack->top];
    }
    return -1;
}


int precedence(char ch) {
    if (ch == '+' || ch == '-') return 1;
    if (ch == '*' || ch == '/') return 2;
    if (ch == '^') return 3;
    return 0;
}


int isOperand(char ch) {
    return isalnum(ch);
}

void reverse(char *exp) {
    int n = strlen(exp);
    for (int i = 0; i < n / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[n - i - 1];
        exp[n - i - 1] = temp;
    }
}


void infixToPostfix(char *infix, char *postfix) {
    struct Stack stack;
    initStack(&stack);
    int i = 0, j = 0;
    while (infix[i] != '\0') {
        char ch = infix[i];
        if (isOperand(ch)) {
            postfix[j++] = ch;
        } else if (ch == '(') {
            push(&stack, ch);
        } else if (ch == ')') {
            while (!isEmpty(&stack) && peek(&stack) != '(') {
                postfix[j++] = pop(&stack);
            }
            pop(&stack); // Remove '('
        } else {
            while (!isEmpty(&stack) && precedence(peek(&stack)) >= precedence(ch)) {
                postfix[j++] = pop(&stack);
            }
            push(&stack, ch);
        }
        i++;
    }
    while (!isEmpty(&stack)) {
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0';
}


void infixToPrefix(char *infix, char *prefix) {
    reverse(infix);  
    struct Stack stack;
    initStack(&stack);
    int i = 0, j = 0;
    
    
    while (infix[i] != '\0') {
        if (infix[i] == '(') {
            infix[i] = ')';
        } else if (infix[i] == ')') {
            infix[i] = '(';
        }
        i++;
    }
    
   
    i = 0;
    while (infix[i] != '\0') {
        char ch = infix[i];
        if (isOperand(ch)) {
            prefix[j++] = ch;
        } else if (ch == '(') {
            push(&stack, ch);
        } else if (ch == ')') {
            while (!isEmpty(&stack) && peek(&stack) != '(') {
                prefix[j++] = pop(&stack);
            }
            pop(&stack); 
        } else {
            while (!isEmpty(&stack) && precedence(peek(&stack)) >= precedence(ch)) {
                prefix[j++] = pop(&stack);
            }
            push(&stack, ch);
        }
        i++;
    }
    while (!isEmpty(&stack)) {
        prefix[j++] = pop(&stack);
    }
    prefix[j] = '\0';

   
    reverse(prefix);
}


int evaluatePostfix(char *postfix) {
    struct Stack stack;
    initStack(&stack);
    int i = 0;
    while (postfix[i] != '\0') {
        char ch = postfix[i];
        if (isdigit(ch)) {
            push(&stack, ch - '0'); 
        } else {
            int val2 = pop(&stack);
            int val1 = pop(&stack);
            switch (ch) {
                case '+': push(&stack, val1 + val2); break;
                case '-': push(&stack, val1 - val2); break;
                case '*': push(&stack, val1 * val2); break;
                case '/': push(&stack, val1 / val2); break;
                case '^': push(&stack, pow(val1, val2)); break;
            }
        }
        i++;
    }
    return pop(&stack);
}


int main() {
    char infix[MAX], postfix[MAX], prefix[MAX];
    int choice;
    
    do {
        printf("\nMenu:\n");
        printf("1. Infix to Postfix\n");
        printf("2. Infix to Prefix\n");
        printf("3. Evaluate Postfix Expression\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter infix expression: ");
                scanf("%s", infix);
                infixToPostfix(infix, postfix);
                printf("Postfix expression: %s\n", postfix);
                break;
            
            case 2:
                printf("Enter infix expression: ");
                scanf("%s", infix);
                infixToPrefix(infix, prefix);
                printf("Prefix expression: %s\n", prefix);
                break;
            
            case 3:
                printf("Enter postfix expression: ");
                scanf("%s", postfix);
                printf("Postfix evaluation result: %d\n", evaluatePostfix(postfix));
                break;
            
            case 4:
                printf("Exiting...\n");
                break;
            
            default:
                printf("Invalid choice!\n");
                break;
        }
    } while (choice != 4);
    return 0;
}
